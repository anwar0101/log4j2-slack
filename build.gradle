buildscript {
    ext {
        pomFile = file("$project.buildDir/generated-pom.xml")
        isReleaseVersion = !(projectVersion =~ /-SNAPSHOT$/)
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath "ru.vyarus:gradle-pom-plugin:$gradlePomPluginVersion"
    }
}

group projectGroupId
version projectVersion

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'ru.vyarus.pom'

sourceCompatibility = javaVersionNumber

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
    compile "com.squareup.okhttp3:okhttp:$okHttpVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile("com.github.seratch:jslack:$jslackVersion") {
        exclude group: 'com.google.code.gson', module: 'gson'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

pom {
    name 'Log4j2 Slack Appender'
    description 'This is a highly customizable appender for Apache SLF4J2 to push the logs to Slack using webhooks'
    licenses {
        license {
            name 'Apache License, Version 2.0'
            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
        url 'https://github.com/rage28/log4j2-slack'
        connection 'scm:git@github.com:rage28/log4j2-slack.git'
        developerConnection 'scm:git@github.com:rage28/log4j2-slack.git'
    }
    developers {
        developer {
            id "rage28"
            name "Raghavendra Bhuvan"
            email "rage28@gmail.com"
            roles {
                role 'Developer'
            }
        }
    }
}

signing {
    required { signatory != null && project.ext.isReleaseVersion }
    sign configurations.archives
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

tasks.withType(Jar) {
    from(project.projectDir) {
        include 'LICENSE.md'
        into 'META-INF'
    }
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenLocalRepository {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
}

publishing {
    repositories {
        mavenLocal()
        maven {
            if (project.ext.isReleaseVersion) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }

            credentials {
                username = project.properties.ossrhUsername
                password = project.properties.ossrhPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId projectGroupId
            artifactId rootProject.name
            version projectVersion

            from components.java

            artifact sourcesJar
            artifact javadocJar

            // Sign the pom.xml
            if (signing.required) {
                // Sign the pom.xml.
                pom.withXml {
                    writeTo(project.ext.pomFile)
                    def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    project.ext.pomFile.delete()
                }

                // Sign the artifacts.
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
}
